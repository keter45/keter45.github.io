{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","webpackCompilationHash":"dc7d923527fa7680e5c5","result":{"data":{"deck":{"id":"6ffc82dc-f95e-59b0-aca1-fa685127c6c2","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = dracula;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Comunica\\xE7\\xE3o entre componentes com vue.js \\uD83D\\uDCDE\"), mdx(\"p\", null, \"Uma breve introdu\\xE7\\xE3o ao tema\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"title='Base de um componente'\",\n    \"title\": \"'Base\",\n    \"de\": true,\n    \"um\": true,\n    \"componente'\": true\n  }), \"\\n<template>\\n  <div> Hello </div>\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  export default {\\n    name: 'signIn',\\n  };\\n</script>\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<template>\\n  <div> Hello </div>\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  export default {\\n    name: 'signIn',\\n    props: {\\n      title: String,\\n    },\\n    data() {\\n      return {\\n        firstName: null,\\n      }\\n    },\\n  };\\n</script>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template>\\n  <div> {{ title }} </div>\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  export default {\\n    name: 'signIn',\\n    props: {\\n      title: String,\\n    },\\n    data() {\\n      return {\\n        firstName: null,\\n      }\\n    },\\n  };\\n</script>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template>\\n  <div> {{ title }} </div>\\n  <v-form>\\n    <v-text-field\\n      v-model='firstName'\\n      label='Nome'\\n    />\\n  </v-form>\\n  Bem vindo, {{ firstName }}!\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  export default {\\n    name: 'signIn',\\n    props: {\\n      title: String,\\n    },\\n    data() {\\n      return {\\n        firstName: null,\\n      }\\n    },\\n  };\\n</script>\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"title='Novo componente filho'\",\n    \"title\": \"'Novo\",\n    \"componente\": true,\n    \"filho'\": true\n  }), \"<template>\\n  <v-text-field\\n    v-model='cep'\\n    label='CEP'\\n  />\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  export default {\\n    name: 'cepInput',\\n    props: {\\n      name: String,\\n    },\\n    data() {\\n      return {\\n        cep: null,\\n      }\\n    },\\n  };\\n</script>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template>\\n  <v-text-field\\n    v-model='cep'\\n    label='CEP'\\n    @change='handleChange'\\n  />\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  export default {\\n    name: 'cepInput',\\n    props: {\\n      name: String,\\n    },\\n    data() {\\n      return {\\n        cep: null,\\n      }\\n    },\\n  };\\n</script>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template>\\n  <v-text-field\\n    v-model='cep'\\n    label='CEP'\\n    @change='handleChange'\\n  />\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  export default {\\n    name: 'cepInput',\\n    props: {\\n      name: String,\\n    },\\n    data() {\\n      return {\\n        cep: null,\\n      }\\n    },\\n    methods: {\\n      handleChange(value) {\\n        const isCepValid = this.checkCep(value);\\n      },\\n      checkCep(value) {\\n        ...\\n      },\\n    },\\n  };\\n</script>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template>\\n  <v-text-field\\n    v-model='cep'\\n    label='CEP'\\n    @change='handleChange'\\n  />\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  export default {\\n    name: 'cepInput',\\n    props: {\\n      name: String,\\n    },\\n    data() {\\n      return {\\n        cep: null,\\n      }\\n    },\\n    methods: {\\n      handleChange(value) {\\n        const isCepValid = this.checkCep(value);\\n        this.$emit('cepValues', isCepValid);\\n      },\\n      checkCep(value) {\\n        ...\\n      },\\n    },\\n  };\\n</script>\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [dracula, dracula],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Usando .$emit\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle='1'\",\n    \"subtitle\": \"'1'\"\n  }), \"<template>\\n  <div> {{ title }} </div>\\n  <v-form>\\n    <v-text-field\\n      v-model='firstName'\\n      label='Nome'\\n    />\\n  </v-form>\\n  Bem vindo, {{ firstName }}!\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  export default {\\n    name: 'signIn',\\n    props: {\\n      title: String,\\n    },\\n    data() {\\n      return {\\n        firstName: null,\\n      }\\n    },\\n  };\\n</script>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle='2'\",\n    \"subtitle\": \"'2'\"\n  }), \"<template>\\n  <v-text-field\\n    v-model='cep'\\n    label='CEP'\\n    @change='handleChange'\\n  />\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  export default {\\n    name: 'cepInput',\\n    props: {\\n      name: String,\\n    },\\n    data() {\\n      return {\\n        cep: null,\\n      }\\n    },\\n    methods: {\\n      handleChange(value) {\\n        const isCepValid = this.checkCep(value);\\n        this.$emit('cepValues', isCepValid);\\n      },\\n      checkCep(value) {\\n        ...\\n      },\\n    },\\n  };\\n</script>\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle='1'\",\n    \"subtitle\": \"'1'\"\n  }), \"<template>\\n  <div> {{ title }} </div>\\n  <v-form>\\n    <v-text-field\\n      v-model='firstName'\\n      label='Nome'\\n    />\\n    <cep-input\\n      :name='firstName'\\n    />\\n  </v-form>\\n</template>\\n\\n<script lang=\\\"ts\\\">\\nimport CepInput from '@/cepInput'\\n  export default {\\n    name: 'signIn',\\n    components:{\\n      CepInput,\\n    },\\n    props: {\\n      title: String,\\n    },\\n    data() {\\n      return {\\n        firstName: null,\\n      }\\n    },\\n  };\\n</script>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle='2'\",\n    \"subtitle\": \"'2'\"\n  }), \"<template>\\n  <v-text-field\\n    v-model='cep'\\n    label='CEP'\\n    @change='handleChange'\\n  />\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  export default {\\n    name: 'cepInput',\\n    props: {\\n      name: String,\\n    },\\n    data() {\\n      return {\\n        cep: null,\\n      }\\n    },\\n    methods: {\\n      handleChange(value) {\\n        const isCepValid = this.checkCep(value);\\n        this.$emit('cepValues', isCepValid);\\n      },\\n      checkCep(value) {\\n        ...\\n      },\\n    },\\n  };\\n</script>\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle='1'\",\n    \"subtitle\": \"'1'\"\n  }), \"<template>\\n  <div> {{ title }} </div>\\n  <v-form>\\n    <v-text-field\\n      v-model='firstName'\\n      label='Nome'\\n    />\\n    <cep-input\\n      :name='firstName'\\n      @cepValues='saveCepValue'\\n    />\\n  </v-form>\\n</template>\\n\\n<script lang=\\\"ts\\\">\\nimport CepInput from '@/cepInput'\\n  export default {\\n    name: 'signIn',\\n    components:{\\n      CepInput,\\n    },\\n    props: {\\n      title: String,\\n    },\\n    data() {\\n      return {\\n        firstName: null,\\n      }\\n    },\\n    methods: {\\n      saveCepValue(value) {\\n        this.doSomething(value);\\n      },\\n    },\\n  };\\n</script>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle='2'\",\n    \"subtitle\": \"'2'\"\n  }), \"<template>\\n  <v-text-field\\n    v-model='cep'\\n    label='CEP'\\n    @change='handleChange'\\n  />\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  export default {\\n    name: 'cepInput',\\n    props: {\\n      name: String,\\n    },\\n    data() {\\n      return {\\n        cep: null,\\n      }\\n    },\\n    methods: {\\n      handleChange(value) {\\n        const isCepValid = this.checkCep(value);\\n        this.$emit('cepValues', isCepValid);\\n      },\\n      checkCep(value) {\\n        ...\\n      },\\n    },\\n  };\\n</script>\\n\"))), mdx(Step, {\n    title: \"Usando .$refs\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle='1'\",\n    \"subtitle\": \"'1'\"\n  }), \"<template>\\n  <div> {{ title }} </div>\\n  <v-form>\\n    <v-text-field\\n      v-model='firstName'\\n      label='Nome'\\n    />\\n    <cep-input\\n      :name='firstName'\\n      ref='cepInput'\\n    />\\n    <v-btn\\n      label='save'\\n      @click='saveForm'\\n    />\\n  </v-form>\\n</template>\\n\\n<script lang=\\\"ts\\\">\\nimport CepInput from '@/cepInput'\\n  export default {\\n    name: 'signIn',\\n    components:{\\n      CepInput,\\n    },\\n    props: {\\n      title: String,\\n    },\\n    data() {\\n      return {\\n        firstName: null,\\n      }\\n    },\\n    methods: {\\n      saveCepValue(value) {\\n        this.doSomething(value);\\n      },\\n    },\\n  };\\n</script>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle='2'\",\n    \"subtitle\": \"'2'\"\n  }), \"<template>\\n  <v-text-field\\n    v-model='cep'\\n    label='CEP'\\n  />\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  export default {\\n    name: 'cepInput',\\n    props: {\\n      name: String,\\n    },\\n    data() {\\n      return {\\n        cep: null,\\n      }\\n    },\\n    methods: {\\n      checkCep() {\\n        ...\\n      },\\n    },\\n  };\\n</script>\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle='1'\",\n    \"subtitle\": \"'1'\"\n  }), \"<template>\\n  <div> {{ title }} </div>\\n  <v-form>\\n    <v-text-field\\n      v-model='firstName'\\n      label='Nome'\\n    />\\n    <cep-input\\n      :name='firstName'\\n      ref='cepInput'\\n    />\\n    <v-btn\\n      label='save'\\n      @click='saveForm'\\n    />\\n  </v-form>\\n</template>\\n\\n<script lang=\\\"ts\\\">\\nimport CepInput from '@/cepInput'\\n  export default {\\n    name: 'signIn',\\n    components:{\\n      CepInput,\\n    },\\n    props: {\\n      title: String,\\n    },\\n    data() {\\n      return {\\n        firstName: null,\\n      }\\n    },\\n    methods: {\\n      saveForm() {\\n        const cepCheck = this.$refs.cepInput.checkCep();\\n        if(cepCheck) {\\n          this.doSomething();\\n        },\\n      },\\n    },\\n  };\\n</script>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle='2'\",\n    \"subtitle\": \"'2'\"\n  }), \"<template>\\n  <v-text-field\\n    v-model='cep'\\n    label='CEP'\\n  />\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  export default {\\n    name: 'cepInput',\\n    props: {\\n      name: String,\\n    },\\n    data() {\\n      return {\\n        cep: null,\\n      }\\n    },\\n    methods: {\\n      checkCep() {\\n        return cepIsValid(); \\n      },\\n    },\\n  };\\n</script>\\n\")))), mdx(\"hr\", null), mdx(\"p\", null, \"Alguns links uteis:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://v15.vuetifyjs.com/\"\n  }), \"Vuetify V15\"), \" \\uD83D\\uDC68\\uD83C\\uDFFD\\u200D\\uD83C\\uDFA8\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://underscorejs.org/\"\n  }), \"Underscore js\"), \" \\uD83D\\uDD28\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://momentjs.com/\"\n  }), \"Moment js\"), \" \\u23F0\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"6ffc82dc-f95e-59b0-aca1-fa685127c6c2","slug":"","title":"Comunicação entre componentes com vue.js :telephone_receiver:"}}}